{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About Aksharify","text":""},{"location":"about/#aksharify","title":"Aksharify","text":""},{"location":"about/#what-is-asciiart","title":"What is AsciiArt","text":"<p>ASCII art is a style of art in which people make graphics and designs by using letters, numbers, and symbols from a unique set of characters known as ASCII. ASCII painters create intriguing images by arranging these characters in patterns and forms rather than using colours and brushes as in traditional art. They meticulously select the appropriate characters and combine them to produce images of animals, people, or even landscapes. It's almost as if you're sketching with letters and symbols! ASCII art is a fun way for artists to express themselves using only the basic characters present on a computer keyboard.</p>"},{"location":"about/#motivation","title":"Motivation","text":"<p>The inspiration for this module came from a Numberphile video called \"The Trinity Hall Prime,\" which I first saw in high school days. It motivated me to explore the possibilities of such a prime number. I created a Python module that uses a predetermined character set to turn photos into ASCII art. It manipulates images using the PIL package, transforming them to grayscale before mapping pixel values to ASCII letters. Users can change the character set to get different effects.</p>"},{"location":"about/#about-module","title":"About module","text":"<p>Aksharify is an open-source python package hosted on GitHub that allows you to effortlessly transform images into captivating ASCII art representations. With Aksharify, you can convert your favorite images into an artistic arrangement of ASCII characters, adding a unique and nostalgic touch to your projects.</p> <p>Start transforming your photos into captivating ASCII art with Aksharify and unleash your creativity in the world of visual representation!</p>"},{"location":"about/#key-features","title":"Key Features","text":"<ul> <li> <p>Convert photos and images into ASCII art with a single function call.</p> </li> <li> <p>Fine-tune the output by adjusting parameters such as character set, resolution etc.</p> </li> <li> <p>Support for various character sets, allowing you to customize the style of the generated ASCII art.</p> </li> <li> <p>Export the ASCII art as plain text or save it as an image file for easy sharing and integration.</p> </li> </ul>"},{"location":"alternatives/","title":"Alternatives","text":"<ul> <li>https://github.com/nodanaonlyzuul/asciiart ruby</li> <li>https://github.com/xrlin/AsciiArt golang</li> <li>https://github.com/JuliaPoo/AsciiArtist python edge</li> <li>https://github.com/8-bitz/AsciiArt python video</li> <li>https://github.com/adrinorosario/ASCII_Art python back space github</li> </ul>"},{"location":"contributions/","title":"Contributions","text":"<p>Contributions are what make the open source community such a wonderful place to learn, be inspired, and create. Any contributions you make are <code>appreciated greatly</code>.</p> <p>You can contribute via these 3 methods</p> <ul> <li>feature request</li> <li>bug/issue report</li> <li>enhancement (code contributions)</li> </ul>"},{"location":"contributions/#feature-request-bug-report","title":"Feature request / Bug report","text":"<p>See the open issues for a full list of proposed features and known issues. If yours is not there then </p> <p>If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\". Don't forget to give the project a star! Thanks again!</p> <ol> <li>Fork the Project</li> <li>Create your Feature Branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit your Changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the Branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"gallery/","title":"Gallery","text":"<p>\\(\\alpha\\)</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Before we begin, make sure you have one of recent versions of Python installed on your computer.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>The recommended way to install Aksharify is via the python package manager, pip. Open your terminal or command prompt and run the following command:</p> <pre><code>python -m pip install aksharify\n</code></pre> <p>This command will automatically download + install Aksharify and its dependencies.</p>"},{"location":"getting-started/#windows-specific-dependency","title":"Windows-specific Dependency","text":"<p>If you are using Aksharify on a Windows system, you will need to install an additional dependency. Follow these steps:</p> Why are there Windows specific dependencies? <p>Aksharify uses cairosvg package in order to export output into .png format. Cairosvg has annoying dependency problem because of cairocffi which is not built for windows. So windows users supposed to add the additional dependency as explained here 1. This is quite long procedure instead we can use a quicker solution which is by installing from an unofficial repository here. You can choose whichever method that suits you better. For quicker solution (i.e. manually installing required binaries1) follow the instuctions below.</p> <p>Install pipwin using pip:</p> <pre><code>python -m pip install pipwin\n</code></pre> <p>To install binary</p> <pre><code>pipwin install cairocffi\n</code></pre> <p>We are ready to use aksharify and creating awesome Ascii art.</p>"},{"location":"getting-started/#quick-starter","title":"Quick Starter","text":"<pre><code>from aksharify import AksharArt\nfrom aksharify.image import Image\nfrom aksharify.distributions import Linear\nfrom aksharify.outputs import SVG\n</code></pre> <pre><code>image = Image(\"..\\images\\julia1.png\")\nimage.set_dim(200)\nimage.show()\n</code></pre> <pre><code>lin = Linear(\"01\")\nlin.show()\n</code></pre> <pre><code>art = AksharArt(image, lin)\nart.aksharify(show=True)\n</code></pre> <pre><code>config = SVG()\nconfig.file_name = \"..\\\\art\"\nconfig.bold = True\n</code></pre> <pre><code>art.svg_output(config)\n</code></pre> <p>For examples from user community, please refer to the primepatel.github.io/aksharify</p> <ol> <li> <p>https://cairocffi.readthedocs.io/en/stable/overview.html \u21a9\u21a9</p> </li> </ol>"}]}