{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About Aksharify","text":""},{"location":"about/#aksharify","title":"Aksharify","text":""},{"location":"about/#what-is-asciiart","title":"What is AsciiArt","text":"<p>ASCII art is a style of art in which people make graphics and designs by using letters, numbers, and symbols from a unique set of characters known as ASCII. ASCII painters create intriguing images by arranging these characters in patterns and forms rather than using colours and brushes as in traditional art. They meticulously select the appropriate characters and combine them to produce images of animals, people, or even landscapes. It's almost as if you're sketching with letters and symbols! ASCII art is a fun way for artists to express themselves using only the basic characters present on a computer keyboard.</p>"},{"location":"about/#motivation","title":"Motivation","text":"<p>The inspiration for this module came from a Numberphile video called \"The Trinity Hall Prime,\" which I first saw in high school days. It motivated me to explore the possibilities of such a prime number. I created a Python module that uses a predetermined character set to turn photos into ASCII art. It manipulates images using the PIL package, transforming them to grayscale before mapping pixel values to ASCII letters. Users can change the character set to get different effects.</p>"},{"location":"about/#about-module","title":"About module","text":"<p>Aksharify is an open-source python package hosted on GitHub that allows you to effortlessly transform images into captivating ASCII art representations. With Aksharify, you can convert your favorite images into an artistic arrangement of ASCII characters, adding a unique and nostalgic touch to your projects.</p> <p>Start transforming your photos into captivating ASCII art with Aksharify and unleash your creativity in the world of visual representation!</p>"},{"location":"about/#key-features-and-capabilities","title":"Key Features and Capabilities","text":"<ul> <li> <p>ASCII Art Generation: Aksharify facilitates the generation of ASCII art from images, converting the pixel values into a series of characters that form the art representation.</p> </li> <li> <p>Diverse Distributions: Users can choose from a variety of distributions, such as Linear, Exponential, and Normal, to control the density and arrangement of characters in the art.</p> </li> <li> <p>Customizable Character Sets: Each distribution allows users to customize the character set used for generating ASCII art, enabling them to express their creativity.</p> </li> <li> <p>Versatility: Aksharify supports multiple output formats, including PDF, EPS, PNG, TXT, HTML, and SVG, providing flexibility in sharing and integrating art in various media.</p> </li> <li>Ease of Use: Simple API for easy image-to-ASCII conversion.</li> </ul>"},{"location":"advusage/","title":"Advance Usage","text":""},{"location":"advusage/#overview","title":"Overview","text":"<p>Aksharify is Python package that enables users to transform images into captivating ASCII art representations. This sophisticated tool provides a straightforward four-step process, allowing individuals to explore the realm of visual expression with ease and creativity.</p> <ol> <li> <p>Load Image: Utilize the Image class to load the image you want to transform into ASCII art. You can provide either a local file path or a URL for loading.</p> </li> <li> <p>Customize Distribution: Choose the desired distribution (e.g., Linear, Exponential or Normal) using the corresponding classes from the distributions module.</p> </li> <li> <p>Generate ASCII Art: Create an AksharArt object by passing the loaded image and chosen distribution. Use the aksharify method to generate captivating ASCII art.</p> </li> <li> <p>Output Art: Select an output file format (e.g., PDF, PNG, or SVG) by configuring the appropriate output class. Use the export method to save your final ASCII art.</p> </li> </ol>"},{"location":"advusage/#step-1-load-image","title":"Step 1: Load Image","text":"<p>The <code>Image</code> class in \"aksharify\" loads and preprocesses images for ASCII art generation. You can load an image using the file path or URL. Use the <code>resize</code> method to adjust the dimensions, affecting the number lines and the number of characters in each line. The <code>Image</code> class allows you to specify either the width or height for resizing, and it automatically maintains the aspect ratio for distortion-free resizing. Optional normalization scales pixel values for enhanced visual quality.  The show() method in \"aksharify\" previews the image used for ASCII art. Use grayscale=True to display the grayscale version.</p> <p>Examples: <pre><code>from aksharify.image import Image\n# Example 1: Load image from file path\nimage = Image(path=\"path/to/your/image.jpg\")\nimage.resize(width=100, height=80)\nimage.normalize()\n# Example 2: Load image from URL\nimage_url = \"https://example.com/your-image.jpg\"\nimage = Image(url=image_url)\nimage.resize(width=120, height=90)\n# Both images are now ready for ASCII art with AksharArt class.\n# Show the colored image\nimage.show()\n# Show the grayscale version of the image\nimage.show(grayscale=True)\n</code></pre></p>"},{"location":"advusage/#when-resizing-images-for-ascii-art-consider-these-key-factors","title":"When resizing images for ASCII art, consider these key factors:","text":"<ul> <li> <p>Aspect Ratio: Maintain the aspect ratio to prevent distortion and accurately represent the image.</p> </li> <li> <p>Level of Detail: Image dimensions affect the amount of detail in ASCII art. Smaller images simplify the representation, while larger ones offer more intricacy.</p> </li> <li> <p>Performance: Resizing to smaller dimensions reduces the character count, enhancing rendering speed and processing efficiency.</p> </li> </ul>"},{"location":"advusage/#step-2-customize-distribution","title":"Step 2: Customize Distribution","text":"<p>In the context of the Aksharify package, \"distribution\" refers to a method of arranging characters in the ASCII art representation based on their density or occurrence in the image. The distribution determines how the characters are assigned to different regions of the image based on the pixel values.</p> <p>Aksharify offers different distribution options to users, each providing a unique way of generating ASCII art:</p>"},{"location":"advusage/#linear-distribution","title":"Linear Distribution","text":"<p>The linear distribution assigns characters linearly based on their order in the specified character set. It is a simple and non-customizable distribution where characters are distributed evenly across the image.</p>"},{"location":"advusage/#exponential-distribution","title":"Exponential Distribution","text":"<p>The exponential distribution allows users to control the character density using a power parameter. Higher power values concentrate characters in darker regions of the image, creating a visually striking effect.</p>"},{"location":"advusage/#normal-distribution","title":"Normal Distribution","text":"<p>The normal distribution enables users to emphasize specific regions of an image in ASCII art by adjusting the mean and standard deviation. The mean determines the central region with denser characters, while the std controls spread.</p> <p>Common Parameters:</p> <ul> <li>chars::string (default='@%#*+=;:-,. '): The character set used for ASCII art representation.</li> <li>order::bool (default=False): If True, characters are selected based on their pixel density, creating a more organized output.</li> </ul> <p>Exponential Distribution Specific Parameter:</p> <ul> <li>power::float (default=1.0): Controls the rate of change in character density. Lower values create \"ultra-light\" images, higher values produce \"dark\" images.</li> </ul> <p>Normal Distribution Specific Parameters:</p> <ul> <li>mean::float (default=0.5): Represents the mean of the normal distribution, controlling the central character density.</li> <li>var::float (default=0.1): The var parameter controls the character spread around the mean, enabling emphasis on specific regions.</li> </ul> <p>The package offers a \"show\" method for each distribution, generating graphs illustrating character assignments to pixel ranges. These graphs provide valuable insights into the behavior of each distribution, helping users select the most suitable one for their creative requirements.</p> <p>Examples</p> <ol> <li> <p>Linear Distribution:    <pre><code>from aksharify.distributions import Linear\nlinear = Linear(chars=\" .:-=+*#%@\")\nlinear.show()\n</code></pre></p> </li> <li> <p>Exponential Distribution:    <pre><code>from aksharify.distributions import Exponential\nexponential = Exponential(chars=\"@%#*+=:- .\", power=2.0)\nexponential.show()\n</code></pre></p> </li> <li> <p>Normal Distribution:    <pre><code>from aksharify.distributions import Normal\nnormal = Normal(chars=\"@%#*+=:- .\", mean=0.5, std_dev=0.2)\nnormal.show()\n</code></pre></p> </li> </ol> <p>Using these methods, you can explore different distribution options to create unique and visually captivating ASCII art from your images.</p>"},{"location":"advusage/#step-3-generate-ascii-art","title":"Step 3: Generate ASCII Art","text":"<p>In the third step, we create an instance of the AksharArt class by providing the loaded image and the configured distribution as inputs. This allows us to generate ASCII art from the given image using the specified distribution.</p> <pre><code>from aksharify import AksharArt\nfrom aksharify.image import Image\nfrom aksharify.distributions import Linear\n# Load the image\nimage = Image(\"path/to/image.jpg\")\nimage.resize(100)  # Resize the image to 100 characters in width (aspect ratio maintained)\n# Configure the distribution\ndistribution = Linear(\"01\")  # Linear distribution with characters \"01\"\n# Create the AksharArt instance and generate ASCII art\nart = AksharArt(image, distribution)\nart.aksharify() # art.aksharify(show=True) for displaying there itself\n# Display the ASCII art\nart.show()\n</code></pre>"},{"location":"advusage/#step-4-configure-and-generate-output","title":"Step 4: Configure and Generate Output","text":"<p>Aksharify supports various output formats to export the generated ASCII art. The supported formats are:</p> <p>SVG: Vector-based representations for various graphics applications.</p> <p>Attributes:</p> <ul> <li><code>font_size</code> (int): The font size to be used for the ASCII art.</li> <li> <p><code>background_color</code> (str): The background color of the SVG image.  </p> </li> <li> <p><code>bold</code> (bool): Whether the ASCII art should be displayed in bold.</p> </li> <li><code>fill_color</code> (str): The color to fill the ASCII characters (optional).</li> <li><code>file_name</code> (str): The default name for saving the SVG output file.</li> </ul> <p>PNG: Visual details preserved for web usage and projects.</p> <p>Attributes (In addition to SVG attributes):</p> <ul> <li><code>width</code> (int or None): The width of the PNG image in pixels. If <code>None</code>, the width will be determined by the content.</li> <li><code>height</code> (int or None): The height of the PNG image in pixels. If <code>None</code>, the height will be determined by the content.</li> </ul> <p>PDF: High-quality output for sharing and printing.</p> <p>Attributes (Same as SVG attributes):</p> <p>EPS (Encapsulated PostScript): Scalable vector graphics for embedding in documents.</p> <p>Attributes (Same as SVG attributes):</p> <p>TXT (Plain Text): Simple and readable representations in text editors and terminals.</p> <p>Attributes:</p> <ul> <li><code>file_name</code> (str): The default name for saving the SVG output file.</li> </ul> <p>HTML: Interactive visualizations for web integration.</p> <p>Attributes:</p> <ul> <li><code>font_family</code> (str): The font family to be used for the ASCII art.</li> <li><code>font_size</code> (int): The font size to be used for the ASCII art.</li> <li><code>bold</code> (bool): Whether the ASCII art should be displayed in bold.</li> <li><code>file_name</code> (str): The default name for saving the HTML output file.</li> </ul> <p>We can save the ASCII art in different output formats specified above, by configuring the output options accordingly. Each output class provides attributes that allow you to customize the visual appearance of your ASCII art.</p> <pre><code># Example 1: Generating ASCII Art and Saving as SVG\nfrom aksharify import AksharArt\nfrom aksharify.image import Image\nfrom aksharify.distributions import Linear\nfrom aksharify.outputs import SVG\n# Load Image\nimage = Image(\"path/to/image.jpg\")\nimage.resize(150)\n# Configure Distribution\ndistribution = Linear(chars=\"01\")\n# Create AksharArt object and Generate ASCII Art\nart = AksharArt(image, distribution)\nart.aksharify(show=False)\n# Configure and Generate SVG Output\nsvg_config = SVG()\nsvg_config.file_name = \"art\"\nsvg_config.bold = True\nart.export(svg_config)\n</code></pre> <p>The <code>.export()</code> method of the <code>AksharArt</code> class in Aksharify can accept multiple arguments, enabling users to provide multiple output configurations in a single call.</p> <p>With this straightforward configuration-based approach, Aksharify ensures a clean and consistent interface to produce stunning ASCII art representations of your images. Experiment with various distributions and output formats to create unique art!</p>"},{"location":"alternatives/","title":"Alternatives","text":"<ul> <li>https://github.com/nodanaonlyzuul/asciiart ruby</li> <li>https://github.com/xrlin/AsciiArt golang</li> <li>https://github.com/JuliaPoo/AsciiArtist python edge</li> <li>https://github.com/8-bitz/AsciiArt python video</li> <li>https://github.com/adrinorosario/ASCII_Art python back space github</li> </ul>"},{"location":"contributions/","title":"Contributions","text":"<p>Contributions are what make the open source community such a wonderful place to learn, be inspired, and create. Any contributions you make are <code>appreciated greatly</code>.</p> <p>You can contribute via these 3 methods</p> <ul> <li>feature request</li> <li>bug/issue report</li> <li>enhancement (code contributions)</li> </ul>"},{"location":"contributions/#feature-request-bug-report","title":"Feature request / Bug report","text":"<p>See the open issues for a full list of proposed features and known issues. If yours is not there then </p> <p>If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\". Don't forget to give the project a star! Thanks again!</p> <ol> <li>Fork the Project</li> <li>Create your Feature Branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit your Changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the Branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"gallery/","title":"Gallery","text":"<p>\\(\\alpha\\)</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Before we begin, make sure you have one of recent versions of Python installed on your computer.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>The recommended way to install Aksharify is via the python package manager, pip. Open your terminal or command prompt and run the following command:</p> <pre><code>python -m pip install aksharify\n</code></pre> <p>This command will automatically download + install Aksharify and its dependencies.</p>"},{"location":"getting-started/#windows-specific-dependency","title":"Windows-specific Dependency","text":"<p>If you are using Aksharify on a Windows system, you will need to install an additional dependency. Follow these steps:</p> Why are there Windows specific dependencies? <p>Aksharify uses cairosvg package in order to export output into .png format. Cairosvg has annoying dependency problem because of cairocffi which is not built for windows. So windows users supposed to add the additional dependency as explained here 1. This is quite long procedure instead we can use a quicker solution which is by installing from an unofficial repository here. You can choose whichever method that suits you better. For quicker solution (i.e. manually installing required binaries1) follow the instuctions below.</p> <p>Install pipwin using pip:</p> <pre><code>python -m pip install pipwin\n</code></pre> <p>To install binary</p> <pre><code>pipwin install cairocffi\n</code></pre> <p>We are ready to use aksharify and creating awesome Ascii art.</p>"},{"location":"getting-started/#quick-starter","title":"Quick Starter","text":"<pre><code>from aksharify import AksharArt\nfrom aksharify.image import Image\nfrom aksharify.distributions import Linear\nfrom aksharify.outputs import SVG\n</code></pre> <pre><code>image = Image(\"images\\julia1.png\")\nimage.resize(200)\nimage.show()\n</code></pre> <pre><code>lin = Linear(\"01\")\nlin.show()\n</code></pre> <pre><code>art = AksharArt(image, lin)\nart.aksharify(show=True)\n</code></pre> <pre><code>config = SVG()\nconfig.file_name = \"art\"\nconfig.bold = True\n</code></pre> <pre><code>art.svg_output(config)\n</code></pre> <p>For examples from user community, please refer to the primepatel.github.io/aksharify</p> <ol> <li> <p>https://cairocffi.readthedocs.io/en/stable/overview.html \u21a9\u21a9</p> </li> </ol>"}]}